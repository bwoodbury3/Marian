import math

class Equation:
    global numbers
    numbers = "1234567890xn.E"
        # A couple of notes about accepted values:
        #   'x' is a variable, of which one variable is allowed
        #   'n' is a negative sign, to differentiate it from a minus sign
    global operators
    operators = "+-*/^!"
    
    def __init__(self, userinput):
        self.strEquation = userinput
        self.userinput = userinput
        self.values, self.symbols = self.toArrays()

    def __str__(self):
        return self.strEquation

    def toArrays(self):
        self.userinput = self.userinput.replace(" ", "")
        subequations = []
        values = []
        symbols = []

        parenstack = []
        if "(" in self.userinput:
            userinputOld = self.userinput
            self.userinput = ""
            for i in range(0, len(userinputOld)):
                self.userinput += userinputOld[i]
                if userinputOld[i] == "(":
                    parenstack.append(i)
                elif userinputOld[i] == ")":
                    index = parenstack.pop()
                    if len(parenstack) == 0:
                        subequations.append(Equation(userinputOld[index + 1 : i]))
                        self.userinput = self.userinput.replace(userinputOld[index : i + 1], "E")

        currNumber = ""
        index = 0
        for char in self.userinput:
            if char in numbers:
                if char == "E":
                    values.append(subequations[index])
                    index += 1
                else:
                    currNumber += char
            elif char in operators:
                symbols.append(char)
                if currNumber != "":
                    if currNumber.startswith("n"):
                        values.append(-1 * float(currNumber[1:]))
                    elif currNumber == 'x':
                        values.append('x')
                    else:
                        values.append(float(currNumber))
                currNumber = ""
        if currNumber != "": # at the end of the iterations, we might have one trailing character
            if currNumber == 'x':
                values.append('x')
            else:
                values.append(float(currNumber))
        return (values, symbols)

    def evaluate(self, x):
        index = 0
        for i in range(len(self.values)): # recursive step: replace each class instance with 
            if isinstance(self.values[i], Equation):
                self.values[i] = self.values[i].evaluate(x)
                index += 1
            if self.values[i] == 'x':
                self.values[i] = x

        while "^" in self.symbols:
            i = self.symbols.index("^")
            sol = self.values[i] ** self.values[i + 1]
            self.values = self.values[0 : i] + [sol] + self.values[i + 1 :]
            self.symbols = self.symbols[: i] + self.symbols[i + 1 :]

        while "!" in self.symbols:
            i = self.symbols.index("!")
            sol = math.factorial(self.values[i])
            self.values[i] = sol
            self.symbols = self.symbols[: i] + self.symbols[i + 1 :]

        while "*" in self.symbols:
            i = self.symbols.index("*")
            sol = self.values[i] * self.values[i + 1]
            self.values = self.values[0 : i] + [sol] + self.values[i + 1 :]
            self.symbols = self.symbols[: i] + self.symbols[i + 1 :]

        while "/" in self.symbols:
            i = self.symbols.index("/")
            sol = self.values[i] / self.values[i + 1]
            self.values = self.values[0 : i] + [sol] + self.values[i + 1 :]
            self.symbols = self.symbols[: i] + self.symbols[i + 1 :]

        while "+" in self.symbols:
            i = self.symbols.index("+")
            sol = self.values[i] + self.values[i + 1]
            self.values = self.values[0 : i] + [sol] + self.values[i + 1 :]
            self.symbols = self.symbols[: i] + self.symbols[i + 1 :]

        while "-" in self.symbols:
            i = self.symbols.index("-")
            sol = self.values[i] - self.values[i + 1]
            self.values = self.values[0 : i] + [sol] + self.values[i + 1 :]
            self.symbols = self.symbols[: i] + self.symbols[i + 1 :]

        return self.values[0]

class FCMLFunction:
    

equation = Equation("4! - (2-x)")
print "Solution to '" + str(equation) + "' = " + str(equation.evaluate(1.0))
